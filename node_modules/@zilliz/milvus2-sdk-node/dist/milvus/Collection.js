"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
var protobufjs_1 = __importDefault(require("protobufjs"));
var utils_1 = require("../utils");
var ErrorReason_1 = require("./const/ErrorReason");
var Collection_1 = require("./types/Collection");
var Response_1 = require("./types/Response");
var Validate_1 = require("./utils/Validate");
var path_1 = __importDefault(require("path"));
var Format_1 = require("./utils/Format");
var Client_1 = require("./Client");
var schemaPath = path_1.default.resolve(__dirname, "../grpc-proto/schema.proto");
/**
 * See all [collection operation examples](https://github.com/milvus-io/milvus-sdk-node/blob/main/example/Collection.ts).
 */
var Collection = /** @class */ (function (_super) {
    __extends(Collection, _super);
    function Collection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a collection in Milvus.
     *
     * @param data
     *  | Property                | Type   |           Description              |
     *  | :---------------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |        Collection name       |
     *  | description             | String |        Collection description       |
     *  | consistency_level       | String |        "Strong" | "Session" (default) | "Bounded"| "Eventually" | "Customized";      |
     *  | fields        | <a href="https://github.com/milvus-io/milvus-sdk-node/blob/main/milvus/types/Collection.ts#L8" target="_blank">FieldType</a> |     Field data      |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause          |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.createCollection({
     *    collection_name: 'my_collection',
     *    fields: [
     *      {
     *        name: "vector_01",
     *        description: "vector field",
     *        data_type: DataType.FloatVect,
     *        type_params: {
     *          dim: "8"
     *        }
     *      },
     *      {
     *        name: "age",
     *        data_type: DataType.Int64,
     *        autoID: true,
     *        is_primary_key: true,
     *        description: "",
     *      },
     *  ],
     *  });
     * ```
     */
    Collection.prototype.createCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, fields, collection_name, description, _b, consistency_level, root, CollectionSchema, FieldSchema, payload, collectionParams, schemaBtyes, promise;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = data || {}, fields = _a.fields, collection_name = _a.collection_name, description = _a.description, _b = _a.consistency_level, consistency_level = _b === void 0 ? "Session" : _b;
                        if (!fields || !fields.length || !collection_name) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.CREATE_COLLECTION_CHECK_PARAMS);
                        }
                        Validate_1.checkCollectionFields(fields);
                        return [4 /*yield*/, protobufjs_1.default.load(schemaPath)];
                    case 1:
                        root = _c.sent();
                        CollectionSchema = root.lookupType("milvus.proto.schema.CollectionSchema");
                        FieldSchema = root.lookupType("milvus.proto.schema.FieldSchema");
                        payload = {
                            name: collection_name,
                            description: description || "",
                            fields: [],
                        };
                        data.fields.forEach(function (field) {
                            var value = __assign(__assign({}, field), { typeParams: Format_1.parseToKeyValue(field.type_params), dataType: field.data_type, isPrimaryKey: field.is_primary_key });
                            var fieldParams = FieldSchema.create(value);
                            payload.fields.push(fieldParams);
                        });
                        collectionParams = CollectionSchema.create(payload);
                        schemaBtyes = CollectionSchema.encode(collectionParams).finish();
                        return [4 /*yield*/, utils_1.promisify(this.client, "CreateCollection", __assign(__assign({}, data), { schema: schemaBtyes, consistency_level: Collection_1.ConsistencyLevelEnum[consistency_level] || Collection_1.ConsistencyLevelEnum.Session }))];
                    case 2:
                        promise = _c.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Check if a collection exists.
     *
     * @param data
     *  | Property              | Type   |           Description              |
     *  | :---------------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property    |           Description              |
     *  | :-------------| :-------------------------------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | value         |        `true` or `false`                 |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.hasCollection({
     *     collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.hasCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "HasCollection", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * List all collections or get collection loading status.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | type(optional)        | enum |       All -> 0, Loaded -> 1       |
     *  | collection_names(optional)        | String[] |       If `type = Loaded`, Milvus will return `collection_names inMemory_percentages`     |
     *
     *
     * @return
     *  | Property    |           Description              |
     *  | :-------------| :-------------------------------  |
     *  | status        |  { error_code: number, reason: string } |
     *  | data         |  Contains collection name, ID , timestamp (UTC created time), and loadedPercentage (100 means loaded)      |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.showCollections();
     * ```
     */
    Collection.prototype.showCollections = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this.client, "ShowCollections", {
                            type: data ? data.type : Collection_1.ShowCollectionsType.All,
                            collection_names: (data === null || data === void 0 ? void 0 : data.collection_names) || [],
                        })];
                    case 1:
                        promise = _a.sent();
                        result = [];
                        promise.collection_names.forEach(function (name, index) {
                            result.push({
                                name: name,
                                id: promise.collection_ids[index],
                                timestamp: promise.created_utc_timestamps[index],
                                loadedPercentage: promise.inMemory_percentages[index],
                            });
                        });
                        promise.data = result;
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Show the details of a collection, e.g. name, schema.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |        Collection name       |
     *
     * @return
     *  | Property    |           Description              |
     *  | :-------------| :-------------------------------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | schema        |        Information of all fields in this collection                |
     *  | collectionID  |        Collection ID                |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.describeCollection({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.describeCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "DescribeCollection", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Show the statistics information of a collection.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property    |           Description              |
     *  | :-------------| :-------------------------------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | stats        |        [{key: string, value: string}]                |
     *  | data  |        Transform **stats** to { row_count: 0 }               |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.getCollectionStatistics({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.getCollectionStatistics = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "GetCollectionStatistics", data)];
                    case 1:
                        promise = _a.sent();
                        promise.data = Format_1.formatKeyValueData(promise.stats, ["row_count"]);
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Load collection data into query nodes, then you can do vector search on this collection.
     * It's async function, but we can use showCollections to check loading status.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause|   *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.loadCollection({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.loadCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "LoadCollection", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Same function with loadCollection, but it's sync function.
     * Help to ensure this collection is loaded.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause|   *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.loadCollectionSync({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.loadCollectionSync = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise, loadedPercentage, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "LoadCollection", data)];
                    case 1:
                        promise = _a.sent();
                        loadedPercentage = 0;
                        _a.label = 2;
                    case 2:
                        if (!(Number(loadedPercentage) < 100)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.showCollections({
                                collection_names: [data.collection_name],
                                type: Collection_1.ShowCollectionsType.Loaded,
                            })];
                    case 3:
                        res = _a.sent();
                        if (res.status.error_code !== Response_1.ErrorCode.SUCCESS) {
                            throw new Error("ErrorCode: " + res.status.error_code + ". Reason: " + res.status.reason);
                        }
                        // Because we pass collection_names in showCollections, so it will only this collection in result.
                        loadedPercentage = Number(res.data[0].loadedPercentage);
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Release a collection from cache to reduce cache usage.
     * Note that you cannot search while the corresponding collection is unloaded.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause |   *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.releaseCollection({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.releaseCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "ReleaseCollection", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Drop a collection. Note that this drops all data in the collection.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause|   *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.dropCollection({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.dropCollection = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "DropCollection", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * @ignore
     * Create collection alias, then you can use alias instead of collection_name when you do vector search
     * @param data
     */
    Collection.prototype.createAlias = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        if (!data.alias) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.ALIAS_NAME_IS_REQUIRED);
                        }
                        return [4 /*yield*/, utils_1.promisify(this.client, "CreateAlias", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * @ignore
     * @param data
     */
    Collection.prototype.dropAlias = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!data.alias) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.ALIAS_NAME_IS_REQUIRED);
                        }
                        return [4 /*yield*/, utils_1.promisify(this.client, "DropAlias", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * @ignore
     * @param data
     */
    Collection.prototype.alterAlias = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        if (!data.alias) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.ALIAS_NAME_IS_REQUIRED);
                        }
                        return [4 /*yield*/, utils_1.promisify(this.client, "AlterAlias", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Do compaction for the collection.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name        | String |       The collection name to compact       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | compactionID  | compaction ID |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.compact({
     *    collection_name: 'my_collection',
     *  });
     * ```
     */
    Collection.prototype.compact = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var collectionInfo, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, this.describeCollection(data)];
                    case 1:
                        collectionInfo = _a.sent();
                        return [4 /*yield*/, utils_1.promisify(this.client, "ManualCompaction", {
                                collectionID: collectionInfo.collectionID,
                            })];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Get compaction states of a targeted compaction id
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | compactionID       | number or string |       the id returned by compact       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | state         | the state of the compaction |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.getCompactionState({
     *    compactionID: compactionID,
     *  });
     * ```
     */
    Collection.prototype.getCompactionState = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!data || !data.compactionID) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.COMPACTIONID_IS_REQUIRED);
                        }
                        return [4 /*yield*/, utils_1.promisify(this.client, "GetCompactionState", data)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Get compaction states of a targeted compaction id
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | compactionID       | number or string |       the id returned by compact       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string }|
     *  | state         | the state of the compaction |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.getCompactionStateWithPlans({
     *    compactionID: compactionID,
     *  });
     * ```
     */
    Collection.prototype.getCompactionStateWithPlans = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!data || !data.compactionID) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.COMPACTIONID_IS_REQUIRED);
                        }
                        return [4 /*yield*/, utils_1.promisify(this.client, "GetCompactionStateWithPlans", data)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return Collection;
}(Client_1.Client));
exports.Collection = Collection;
//# sourceMappingURL=Collection.js.map