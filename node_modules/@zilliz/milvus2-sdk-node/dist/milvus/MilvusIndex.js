"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = void 0;
var utils_1 = require("../utils");
var Client_1 = require("./Client");
var ErrorReason_1 = require("./const/ErrorReason");
var Format_1 = require("./utils/Format");
var Index = /** @class */ (function (_super) {
    __extends(Index, _super);
    function Index() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an index on a vector field. Note that index building is an async progress.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name    | String |        Collection name       |
     *  | field_name         | String |        Field name       |
     *  | extra_params       | Object | Parameters: { index_type: string; metric_type: string; params: string; };      |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause   |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).collectionManager.createIndex({
     *     collection_name: 'my_collection',
     *     field_name: "vector_01",
     *     extra_params: {
     *       index_type: "IVF_FLAT",
     *       metric_type: "IP",
     *       params: JSON.stringify({ nlist: 10 }),
     *     },
     *  });
     * ```
     */
    Index.prototype.createIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var params, promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        if (!data.extra_params || !data.field_name) {
                            throw new Error(ErrorReason_1.ERROR_REASONS.CREATE_INDEX_PARAMS_REQUIRED);
                        }
                        params = __assign(__assign({}, data), { extra_params: Format_1.parseToKeyValue(data.extra_params) });
                        return [4 /*yield*/, utils_1.promisify(this.client, "CreateIndex", params)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Show index information. Current release of Milvus only supports showing latest built index.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name    | String |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string } |
     *  | index_descriptions        | Index information |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).indexManager.describeIndex({
     *     collection_name: 'my_collection',
     *  });
     * ```
     */
    Index.prototype.describeIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "DescribeIndex", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Show index building state.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name    | string |       Collection name       |
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string } |
     *  | state         | Index building state |
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).indexManager.getIndexState({
     *     collection_name: 'my_collection',
     *  });
     * ```
     */
    Index.prototype.getIndexState = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "GetIndexState", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Show index building progress.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name    | String |       Collection name       |
     *
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | status        |  { error_code: number, reason: string } |
     *  | indexed_rows  |  Row count that successfully built with index |
     *  | total_rows    |  Total row count |
     *
     *
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).indexManager.getIndexBuildProgress({
     *     collection_name: 'my_collection',
     *  });
     * ```
     */
    Index.prototype.getIndexBuildProgress = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        // Now we dont have index name, just empty is fine
                        data.index_name = "";
                        return [4 /*yield*/, utils_1.promisify(this.client, "GetIndexBuildProgress", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    /**
     * Drop an index.
     *
     * @param data
     *  | Property           | Type   |           Description              |
     *  | :----------------- | :----  | :-------------------------------  |
     *  | collection_name    | String |       Collection name       |
     *
     *
     * @return
     *  | Property      | Description |
     *  | :-------------| :--------  |
     *  | error_code    | Error code number      |
     *  | reason        | Error cause |
     *
     * #### Example
     *
     * ```
     *  new milvusClient(MILUVS_ADDRESS).indexManager.dropIndex({
     *     collection_name: 'my_collection',
     *  });
     * ```
     */
    Index.prototype.dropIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkCollectionName(data);
                        return [4 /*yield*/, utils_1.promisify(this.client, "DropIndex", data)];
                    case 1:
                        promise = _a.sent();
                        return [2 /*return*/, promise];
                }
            });
        });
    };
    return Index;
}(Client_1.Client));
exports.Index = Index;
//# sourceMappingURL=MilvusIndex.js.map