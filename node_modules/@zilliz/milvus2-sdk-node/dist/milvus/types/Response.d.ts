import { ConsistencyLevelEnum } from "./Collection";
import { IndexState, KeyValuePair, NumberArrayId, SegmentState, StringArrayId, CompactionState } from "./Common";
export declare enum ErrorCode {
    SUCCESS = "Success",
    INDEX_NOT_EXIST = "IndexNotExist",
    UNEXPECTED_ERROR = "UnexpectedError"
}
interface TimeStamp {
    created_timestamp: string;
    created_utc_timestamp: string;
}
interface TimeStampArray {
    created_timestamps: string[];
    created_utc_timestamps: string[];
}
export interface ResStatus {
    error_code: string | number;
    reason: string;
}
export interface BoolResponse {
    status: ResStatus;
    value: Boolean;
}
export interface CollectionData {
    name: string;
    id: string;
    timestamp: string;
    loadedPercentage: string;
}
export interface ShowCollectionsResponse extends TimeStampArray {
    status: ResStatus;
    data: CollectionData[];
}
export interface FieldSchema {
    name: string;
    description: string;
    data_type: string;
    is_primary_key?: boolean;
    type_params: KeyValuePair[];
    index_params: KeyValuePair[];
    autoID: boolean;
}
export interface CollectionSchema {
    name: string;
    description: string;
    fields: FieldSchema[];
}
export interface DescribeCollectionResponse extends TimeStamp {
    status: ResStatus;
    schema: CollectionSchema;
    collectionID: string;
    consistency_level: ConsistencyLevelEnum;
    virtual_channel_names: string[];
    physical_channel_names: string[];
}
export interface StatisticsResponse {
    status: ResStatus;
    stats: KeyValuePair[];
    data: {
        [x: string]: any;
    };
}
export interface ShowPartitionsResponse extends TimeStampArray {
    status: ResStatus;
    partition_names: string[];
    partitionIDs: number[];
}
export interface IndexDescription {
    index_name: string;
    indexID: number;
    params: KeyValuePair[];
    field_name: string;
}
export interface DescribeIndexResponse {
    status: ResStatus;
    index_descriptions: IndexDescription[];
}
export interface GetIndexStateResponse {
    status: ResStatus;
    state: IndexState;
}
export interface GetIndexBuildProgressResponse {
    status: ResStatus;
    indexed_rows: number;
    total_rows: number;
}
export interface MutationResult {
    succ_index: Number[];
    err_index: Number[];
    status: ResStatus;
    acknowledged: boolean;
    insert_cnt: string;
    delete_cnt: string;
    upsert_cnt: string;
    timestamp: string;
    IDs: StringArrayId | NumberArrayId;
}
export interface SearchResultData {
    [x: string]: any;
    score: number;
    id: string;
}
export interface SearchResults {
    status: ResStatus;
    results: SearchResultData[];
}
export interface FlushResult {
    status: ResStatus;
    coll_segIDs: any;
}
export interface QueryResults {
    status: ResStatus;
    data: {
        [x: string]: any;
    }[];
}
export interface GetMetricsResponse {
    status: ResStatus;
    response: any;
    component_name: string;
}
export interface CalcDistanceResponse {
    status: ResStatus;
    [x: string]: any;
}
export interface GetFlushStateResponse {
    status: ResStatus;
    flushed: boolean;
}
export interface QuerySegmentInfo {
    segmentID: number;
    collectionID: number;
    partitionID: number;
    mem_size: number;
    num_rows: number;
    index_name: string;
    indexID: number;
    nodeID: number;
    state: SegmentState[];
}
export interface GetQuerySegmentInfoResponse {
    status: ResStatus;
    infos: QuerySegmentInfo[];
}
export interface CompactionResponse {
    status: ResStatus;
    compactionID: number;
}
export interface GetCompactionStateResponse {
    status: ResStatus;
    state: CompactionState;
    executingPlanNo: number;
    timeoutPlanNo: number;
    completedPlanNo: number;
}
export interface GetCompactionPlansResponse {
    status: ResStatus;
    state: CompactionState;
    mergeInfos: {
        sources: number[];
        target: number;
    }[];
}
export {};
