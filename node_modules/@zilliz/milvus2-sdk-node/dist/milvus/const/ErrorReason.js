"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERROR_REASONS = void 0;
var ERROR_REASONS;
(function (ERROR_REASONS) {
    ERROR_REASONS["MILVUS_ADDRESS_IS_REQUIRED"] = "Milvus addres is required.";
    ERROR_REASONS["CREATE_COLLECTION_CHECK_PARAMS"] = "fields and collection_name is needed";
    ERROR_REASONS["CREATE_COLLECTION_CHECK_PRIMARY_KEY"] = "Fields must contain one data_type = int64 and is_primary_key = true";
    ERROR_REASONS["CREATE_COLLECTION_CHECK_VECTOR_FIELD_EXIST"] = "Fields must contain one vector field column";
    ERROR_REASONS["CREATE_COLLECTION_CHECK_MISS_DIM"] = "Vector field need dim in type params";
    ERROR_REASONS["CREATE_COLLECTION_CHECK_BINARY_DIM"] = "Binary vector field dim need mutiples of 8";
    ERROR_REASONS["COLLECTION_NAME_IS_REQUIRED"] = "Collection name is required";
    ERROR_REASONS["COLLECTION_PARTITION_NAME_ARE_REQUIRED"] = "Collection and partition name are required";
    ERROR_REASONS["INSERT_CHECK_MISS_FIELD"] = "Insert fail: missing some field for this collection in line ";
    ERROR_REASONS["INSERT_CHECK_FILEDS_DATA_IS_REQUIRED"] = "fields_data is required as array.";
    ERROR_REASONS["INSERT_CHECK_WRONG_FIELD"] = "Insert fail: some field is not exist for this collection in line";
    ERROR_REASONS["INSERT_CHECK_WRONG_DIM"] = "Insert fail: Binary vector data length need to equal (dimension / 8) ";
    ERROR_REASONS["INSERT_CHECK_WRONG_DATA_TYPE"] = "Some field type in collection schema is not belong to DataType.  ";
    ERROR_REASONS["SEARCH_MISS_VECTOR_TYPE"] = "Miss vector_type, need to be binary or float vector field type.";
    ERROR_REASONS["SEARCH_NOT_FIND_VECTOR_FIELD"] = "Your anns_field cannot find in this collection.";
    ERROR_REASONS["SEARCH_DIM_NOT_MATCH"] = "Your vector dimension is not match your anns_field dimension";
    ERROR_REASONS["SEARCH_PARAMS_IS_REQUIRED"] = "search_params must contains anns_field, metric_type, topk and params.";
    ERROR_REASONS["DELETE_PARAMS_CHECK"] = "Collection name and expr is required.";
    ERROR_REASONS["GET_METRIC_CHECK_PARAMS"] = "request.metric_type is required.";
    ERROR_REASONS["GET_FLUSH_STATE_CHECK_PARAMS"] = "segmentIDs is required as array";
    ERROR_REASONS["LOAD_BALANCE_CHECK_PARAMS"] = "src_nodeID is required";
    ERROR_REASONS["CREATE_INDEX_PARAMS_REQUIRED"] = "field_name and extra_params are required";
    ERROR_REASONS["PARTITION_NAMES_IS_REQUIRED"] = "partition_names is required";
    ERROR_REASONS["ALIAS_NAME_IS_REQUIRED"] = "alias is required";
    ERROR_REASONS["COMPACTIONID_IS_REQUIRED"] = "compactionID is required";
    ERROR_REASONS["TIMESTAMP_PARAM_CHECK"] = "type should be string (only contains number) or bigint";
    ERROR_REASONS["DATE_TYPE_CHECK"] = "type should be Date";
})(ERROR_REASONS = exports.ERROR_REASONS || (exports.ERROR_REASONS = {}));
//# sourceMappingURL=ErrorReason.js.map