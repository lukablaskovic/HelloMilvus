"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MilvusClient = void 0;
var path_1 = __importDefault(require("path"));
var protoLoader = __importStar(require("@grpc/proto-loader"));
var grpc_js_1 = require("@grpc/grpc-js");
var Collection_1 = require("./Collection");
var Partition_1 = require("./Partition");
var MilvusIndex_1 = require("./MilvusIndex");
var Data_1 = require("./Data");
var sdk_json_1 = __importDefault(require("../sdk.json"));
var ErrorReason_1 = require("./const/ErrorReason");
var Response_1 = require("./types/Response");
var protoPath = path_1.default.resolve(__dirname, "../grpc-proto/milvus.proto");
var MilvusClient = /** @class */ (function () {
    /**
     * Connect to milvus grpc client.
     * CollectionManager: control collection crud api
     * PartitionManager: control partition crud api
     * IndexManager: control index crud api
     * DataManager: Search | Query | Insert | Flush
     * @param address milvus address like: 127.0.0.1:19530
     */
    function MilvusClient(address) {
        if (!address) {
            throw new Error(ErrorReason_1.ERROR_REASONS.MILVUS_ADDRESS_IS_REQUIRED);
        }
        var packageDefinition = protoLoader.loadSync(protoPath, {
            keepCase: true,
            longs: String,
            enums: String,
            defaults: true,
            oneofs: true,
        });
        var grpcObject = grpc_js_1.loadPackageDefinition(packageDefinition);
        var milvusProto = grpcObject.milvus.proto.milvus;
        var client = new milvusProto.MilvusService(address, grpc_js_1.credentials.createInsecure(), {
            // Milvus default max_receive_message_length is 100MB, but Milvus support change max_receive_message_length .
            // So SDK should support max_receive_message_length unlimited.
            "grpc.max_receive_message_length": -1,
        });
        this.client = client;
        this.collectionManager = new Collection_1.Collection(this.client);
        this.partitionManager = new Partition_1.Partition(this.client);
        this.indexManager = new MilvusIndex_1.Index(this.client);
        this.dataManager = new Data_1.Data(this.client, this.collectionManager);
    }
    Object.defineProperty(MilvusClient, "sdkInfo", {
        get: function () {
            return {
                version: sdk_json_1.default.version,
                recommandMilvus: sdk_json_1.default.milvusVersion,
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @ignore
     * Everytime build sdk will rewrite sdk.json depend on version, milvusVersion fields in package.json.
     * @returns
     */
    MilvusClient.prototype.checkVersion = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var res, curMilvusVersion;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.dataManager.getMetric({
                            request: { metric_type: "system_info" },
                        })];
                    case 1:
                        res = _d.sent();
                        curMilvusVersion = (_c = (_b = (_a = res.response.nodes_info[0]) === null || _a === void 0 ? void 0 : _a.infos) === null || _b === void 0 ? void 0 : _b.system_info) === null || _c === void 0 ? void 0 : _c.build_version;
                        if (curMilvusVersion !== MilvusClient.sdkInfo.recommandMilvus) {
                            console.warn("------- Warning ---------");
                            console.warn("Node sdk " + MilvusClient.sdkInfo.version + " recommend Milvus Version " + MilvusClient.sdkInfo.recommandMilvus + ".\nDifferent version may cause some error.");
                            return [2 /*return*/, { error_code: Response_1.ErrorCode.SUCCESS, match: false }];
                        }
                        return [2 /*return*/, { error_code: Response_1.ErrorCode.SUCCESS, match: true }];
                }
            });
        });
    };
    MilvusClient.prototype.closeConnection = function () {
        this.client.close();
        // closed -> 4, connected -> 0
        return this.client.getChannel().getConnectivityState(true);
    };
    return MilvusClient;
}());
exports.MilvusClient = MilvusClient;
//# sourceMappingURL=index.js.map